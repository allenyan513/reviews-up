// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../generated/client"
}

enum ReviewStatus {
  pending
  public
  hidden
}

enum ReviewSource {
  manual
  json
  csv
  twitter
  google
  yelp
  g2
  appsumo
  amazon
  capterra
  producthunt
  facebook
  trustpilot
  tiktok
  instagram
  linkedin
  youtube
  vimeo
  wistia
  soundcloud
}

enum SubscriptionTier {
  free
  pro
}

enum MediaType {
  image
  video
  audio
}

enum CampaignStatus {
  draft
  sending
  sent
  failed
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  name             String?
  avatarUrl        String?
  bio              String?
  website          String?
  twitter          String?
  github           String?
  linkedin         String?
  facebook         String?
  instagram        String?
  youtube          String?
  tiktok           String?
  pinterest        String?
  subscriptionTier SubscriptionTier @default(free)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  Workspace        Workspace[]
  Form             Form[]
  Showcase         Showcase[]
  Account          Account[]
  Review           Review[]
  Campaign         Campaign[]
}

model Account {
  id                String   @id @default(uuid())
  provider          String
  providerAccountId String
  userId            String
  accessToken       String?
  refreshToken      String?
  expiresIn         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Workspace {
  id        String     @id @default(uuid())
  shortId   String     @unique
  name      String
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Form      Form[]
  Review    Review[]
  Showcase  Showcase[]
  Campaign  Campaign[]
}

model Form {
  id          String     @id @default(uuid())
  shortId     String     @unique
  userId      String
  workspaceId String
  name        String
  config      Json?      @default("{}")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Review      Review[]
  Campaign    Campaign[]
}

model Review {
  id            String        @id @default(uuid())
  workspaceId   String
  formId        String?
  userId        String?
  reviewerId    String?
  reviewerName  String
  reviewerImage String?
  reviewerEmail String?
  reviewerUrl   String?
  reviewerTitle String?
  rating        Int?
  text          String?
  tweetId       String?
  source        ReviewSource  @default(manual)
  sourceUrl     String?
  status        ReviewStatus  @default(pending)
  extra         Json?         @default("{}")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  form          Form?         @relation(fields: [formId], references: [id], onDelete: Cascade)
  workspace     Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  reviewer      User?         @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  medias        ReviewMedia[]
}

model ReviewMedia {
  id        String    @id @default(uuid())
  reviewId  String?
  url       String
  thumbnail String?
  type      MediaType @default(image)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Review    Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Showcase {
  id          String    @id @default(uuid())
  shortId     String    @unique
  userId      String
  workspaceId String
  name        String
  config      Json?     @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

//邮件营销活动表
model Campaign {
  id          String         @id @default(uuid())
  userId      String
  workspaceId String
  formId      String
  name        String
  fromName    String
  fromEmail   String
  toEmails    String[]
  subject     String
  content     String
  isTest      Boolean        @default(false)
  status      CampaignStatus @default(draft)
  buttonText  String         @default("Leave a review")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  form        Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}
