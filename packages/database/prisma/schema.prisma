// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../generated/client"
}

enum ReviewStatus {
  pending
  public
  hidden
}

enum ReviewSource {
  manual
  json
  csv
  twitter
  google
  yelp
  g2
  appsumo
  amazon
  capterra
  producthunt
  facebook
  trustpilot
  tiktok
  instagram
  linkedin
  youtube
  vimeo
  wistia
  soundcloud
}

enum SubscriptionTier {
  free
  pro
}

enum MediaType {
  image
  video
  audio
}

enum ProductStatus {
  waitingForAdminReview
  rejected
  pendingForSubmit
  pendingForReceive
  listing
  draft
}

enum ProductCategory {
  ai
  analytics
  automation
  crm
  design
  development
  eCommerce
  education
  finance
  health
  marketing
  productivity
  projectManagement
  security
  socialMedia
  tools
}

enum CampaignStatus {
  draft
  sending
  sent
  failed
}

enum OrderStatus {
  pending
  completed
}

enum PaymentStatus {
  pending
  paid
  unpaid
  no_payment_required
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  name             String?
  avatarUrl        String?
  bio              String?
  website          String?
  twitter          String?
  github           String?
  linkedin         String?
  facebook         String?
  instagram        String?
  youtube          String?
  tiktok           String?
  pinterest        String?
  subscriptionTier SubscriptionTier @default(free)
  balance          Decimal          @default(0.00) @db.Decimal(10, 2)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  products         Product[]
  forms            Form[]
  widgets          Widget[]
  accounts         Account[]
  campains         Campaign[]
  ownerReviews     Review[]         @relation("ReviewOwner")
  reviewerReviews  Review[]         @relation("ReviewReviewer")
  orders           Order[]
}

model Account {
  id                String   @id @default(uuid())
  provider          String
  providerAccountId String
  userId            String
  accessToken       String?
  refreshToken      String?
  expiresIn         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id                 String          @id @default(uuid())
  userId             String
  name               String
  slug               String          @unique
  url                String
  status             ProductStatus   @default(waitingForAdminReview)
  icon               String          @default("")
  screenshot         String?         @default("")
  description        String          @default("")
  featured           Boolean         @default(false)
  category           ProductCategory @default(ai)
  taskReviewCount    Int?            @default(0)
  submitReviewCount  Int?            @default(0)
  receiveReviewCount Int?            @default(0)
  bindingFormId      String?
  longDescription    String?
  features           String?
  useCase            String?
  howToUse           String?
  faq                String?
  redditUrl          String?
  twitterUrl         String?
  facebookUrl        String?
  instagramUrl       String?
  youtubeUrl         String?
  tiktokUrl          String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  forms              Form[]
  reviews            Review[]
  widgets            Widget[]
  campains           Campaign[]
}

model Form {
  id        String     @id @default(uuid())
  shortId   String     @unique
  userId    String
  productId String
  name      String
  config    Json?      @default("{}")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  reviews   Review[]
  campains  Campaign[]
}

model Review {
  id            String        @id @default(uuid())
  productId     String
  ownerId       String?
  formId        String?
  reviewerId    String?
  reviewerName  String
  reviewerImage String?
  reviewerEmail String?
  reviewerUrl   String?
  reviewerTitle String?
  rating        Int?
  text          String?
  tweetId       String?
  source        ReviewSource  @default(manual)
  sourceUrl     String?
  status        ReviewStatus  @default(pending)
  extra         Json?         @default("{}")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  form          Form?         @relation(fields: [formId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  owner         User?         @relation("ReviewOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  reviewer      User?         @relation("ReviewReviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  medias        ReviewMedia[]
}

model ReviewMedia {
  id        String    @id @default(uuid())
  reviewId  String?
  url       String
  thumbnail String?
  type      MediaType @default(image)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Review    Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Widget {
  id        String   @id @default(uuid())
  shortId   String   @unique
  userId    String
  productId String
  name      String
  config    Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

//邮件营销活动表
model Campaign {
  id         String         @id @default(uuid())
  userId     String
  productId  String
  formId     String
  name       String
  fromName   String
  fromEmail  String
  toEmails   String[]
  subject    String
  content    String
  isTest     Boolean        @default(false)
  status     CampaignStatus @default(draft)
  buttonText String         @default("Leave a review")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  form       Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  product    Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id            String        @id @default(uuid())
  sessionId     String        @unique
  userId        String
  productId     String        @default("")
  product       Json          @default("{}")
  priceId       String        @default("")
  price         Json          @default("{}")
  paymentStatus PaymentStatus @default(pending)
  orderStatus   OrderStatus   @default(pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
}

model PaymentEvent {
  id        String @id @default(uuid())
  evnetId   String @unique
  eventType String
  data      Json
}
